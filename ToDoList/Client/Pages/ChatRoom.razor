@page "/chatroom"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

<style>
    body, html {
        height: 100%;
        margin: 0;
        background: #7F7FD5;
        background: -webkit-linear-gradient(to right, #91EAE4, #86A8E7, #7F7FD5);
        background: linear-gradient(to right, #91EAE4, #86A8E7, #7F7FD5);
    }

    .chat {
        margin-top: auto;
        margin-bottom: auto;
    }

    .card {
        height: 500px;
        border-radius: 15px !important;
        background-color: rgba(0,0,0,0.4) !important;
    }

    .contacts_body {
        padding: 0.75rem 0 !important;
        overflow-y: auto;
        white-space: nowrap;
    }

    .msg_card_body {
        overflow-y: auto;
    }

    .card-header {
        border-radius: 15px 15px 0 0 !important;
        border-bottom: 0 !important;
    }

    .card-footer {
        border-radius: 0 0 15px 15px !important;
        border-top: 0 !important;
    }

    .container {
        align-content: center;
    }

    .search {
        border-radius: 15px 0 0 15px !important;
        background-color: rgba(0,0,0,0.3) !important;
        border: 0 !important;
        color: white !important;
    }

        .search:focus {
            box-shadow: none !important;
            outline: 0px !important;
        }

    .type_msg {
        background-color: rgba(0,0,0,0.3) !important;
        border: 0 !important;
        color: white !important;
        height: 60px !important;
        overflow-y: auto;
    }

        .type_msg:focus {
            box-shadow: none !important;
            outline: 0px !important;
        }

    .attach_btn {
        border-radius: 15px 0 0 15px !important;
        background-color: rgba(0,0,0,0.3) !important;
        border: 0 !important;
        color: white !important;
        cursor: pointer;
    }

    .send_btn {
        border-radius: 0 15px 15px 0 !important;
        background-color: rgba(0,0,0,0.3) !important;
        border: 0 !important;
        color: white !important;
        cursor: pointer;
    }

    .search_btn {
        border-radius: 0 15px 15px 0 !important;
        background-color: rgba(0,0,0,0.3) !important;
        border: 0 !important;
        color: white !important;
        cursor: pointer;
    }

    .contacts {
        list-style: none;
        padding: 0;
    }

        .contacts li {
            width: 100% !important;
            padding: 5px 10px;
            margin-bottom: 15px !important;
        }

    .active {
        background-color: rgba(0,0,0,0.3);
    }

    .user_img {
        height: 70px;
        width: 70px;
        border: 1.5px solid #f5f6fa;
    }

    .user_img_msg {
        height: 40px;
        width: 40px;
        border: 1.5px solid #f5f6fa;
    }

    .img_cont {
        position: relative;
        height: 70px;
        width: 70px;
    }

    .img_cont_msg {
        height: 40px;
        width: 40px;
    }

    .online_icon {
        position: absolute;
        height: 15px;
        width: 15px;
        background-color: #4cd137;
        border-radius: 50%;
        bottom: 0.2em;
        right: 0.4em;
        border: 1.5px solid white;
    }

    .offline {
        background-color: #c23616 !important;
    }

    .user_info {
        margin-top: auto;
        margin-bottom: auto;
        margin-left: 15px;
    }

        .user_info span {
            font-size: 20px;
            color: white;
        }

        .user_info p {
            font-size: 10px;
            color: rgba(255,255,255,0.6);
        }

    .video_cam {
        margin-left: 50px;
        margin-top: 5px;
    }

        .video_cam span {
            color: white;
            font-size: 20px;
            cursor: pointer;
            margin-right: 20px;
        }

    .msg_cotainer {
        margin-top: auto;
        margin-bottom: auto;
        margin-left: 10px;
        border-radius: 25px;
        background-color: #82ccdd;
        padding: 10px;
        position: relative;
    }

    .msg_cotainer_send {
        margin-top: auto;
        margin-bottom: auto;
        margin-right: 10px;
        border-radius: 25px;
        background-color: #78e08f;
        padding: 10px;
        position: relative;
    }

    .msg_time {
        position: absolute;
        left: 0;
        bottom: -15px;
        color: rgba(255,255,255,0.5);
        font-size: 10px;
        width: max-content;
    }

    .msg_time_send {
        position: absolute;
        right: 0;
        bottom: -15px;
        color: rgba(255,255,255,0.5);
        font-size: 10px;
        width: max-content;
    }

    .msg_head {
        position: relative;
    }

    #action_menu_btn {
        position: absolute;
        right: 10px;
        top: 10px;
        color: white;
        cursor: pointer;
        font-size: 20px;
    }

    .action_menu {
        z-index: 1;
        position: absolute;
        padding: 15px 0;
        background-color: rgba(0,0,0,0.5);
        color: white;
        border-radius: 15px;
        top: 30px;
        right: 15px;
        display: none;
    }

        .action_menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

            .action_menu ul li {
                width: 100%;
                padding: 10px 15px;
                margin-bottom: 5px;
            }

                .action_menu ul li i {
                    padding-right: 10px;
                }

                .action_menu ul li:hover {
                    cursor: pointer;
                    background-color: rgba(0,0,0,0.2);
                }
</style>
<div class="container-fluid h-100">
    <div class="row justify-content-center h-100">
        <div class="col-md-8 col-xl-6 chat">
            @if (string.IsNullOrEmpty(_currentUser))
            {
                <div class="form-group">
                    <label>
                        User:
                        <input @bind="_userInput" />
                        <button @onclick="EnterChat" disabled="@(!IsConnected)">Enter Chat</button>
                    </label>
                </div>
            }
            <div class="card">
                <div class="card-header msg_head">
                    <div class="d-flex bd-highlight">
                        @*<div class="img_cont">
                                <img src="https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg" class="rounded-circle user_img">
                                <span class="online_icon"></span>
                            </div>*@
                        <div class="user_info">
                            <span>Chat</span>
                            <p>@_messages.Count() Messages</p>
                        </div>
                    </div>
                </div>
                <div class="card-body msg_card_body">
                    @foreach (var message in _messages)
                    {

                        @if (_currentUser == message.Item1)
                        {
                            <div class="d-flex justify-content-end mb-4">
                                <div class="msg_cotainer_send">
                                    @message.Item2
                                    <span class="msg_time_send">@message.Item3.ToShortTimeString()</span>
                                </div>
                                <div class="img_cont_msg">
                                    <img src="https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg" title="@message.Item1" class="rounded-circle user_img_msg">
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex justify-content-start mb-4">
                                <div class="img_cont_msg">
                                    <img src="https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg" title="@message.Item1" class="rounded-circle user_img_msg">
                                </div>
                                <div class="msg_cotainer">
                                    @message.Item2
                                    <span class="msg_time">@message.Item3.ToShortTimeString()</span>
                                </div>
                            </div>
                        }
                    }
                </div>
                @if (!string.IsNullOrEmpty(_currentUser))
                {
                    <div class="card-footer">
                        <div class="input-group">
                            <input class="form-control type_msg" onkeyup="if (event.keyCode == 13) { document.getElementById('submitSpan').click(); }" @bind="_messageInput" size="50" placeholder="Type your message..." />
                            <div class="input-group-append">
                                <span @onclick="Send" id="submitSpan" disabled="@(!IsConnected)" class="input-group-text send_btn"><i class="fas fa-location-arrow"></i></span>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection _hubConnection;
    private List<Tuple<string, string, DateTime>> _messages = new List<Tuple<string, string, DateTime>>();
    private string _userInput;
    private string _messageInput;
    private string _currentUser;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        _hubConnection.On<string, string, DateTime>("ReceiveMessage", (user, message, time) =>
        {
            var encodedMsg = new Tuple<string, string, DateTime>(user, message, time);
            _messages.Add(encodedMsg);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(_messageInput) && !string.IsNullOrEmpty(_currentUser))
        {
            await _hubConnection.SendAsync("SendMessage", _userInput, _messageInput, DateTime.UtcNow);
            _messageInput = string.Empty;
        }
    }

    private void EnterChat()
    {
        _currentUser = _userInput;
        StateHasChanged();
    }


    public bool IsConnected =>
    _hubConnection.State == HubConnectionState.Connected;
}
